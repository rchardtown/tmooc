乐观锁 ：
    乐观锁可以认为是无锁，在读的时候不加任何判断，认为数据线性安全，直接读取；只有在写操作时，才会做判断，判断数据是否正确，
    若正确继续写操作，反正报异常。乐观锁更适合于读操作多写操作少的系统。
    常见的防止写操作时报异常的方法，也即乐观锁防止数据安全的方法：
        1.加version字段。也就是每个线程每次在调用加锁对象时都要版本号加一，这样可以通过当前版本号和数据库存的版本号对比来验证数据是否安全。
        2.CAS算法(Compare and Swap),涉及概念：【1】内存地址V[存在V地址上的旧值i]；【2】线程中存储的V地址的期望值A(最开始时是复制V上的i值，
        后面有V上i有没有变化就不知道了)【3】该V地址上打算更新的值B.
            CAS运行原理： 读取时当然因为是乐观锁，所以不加锁，写操作时加锁。具体为：判断A=?=i值，
                        如果相等，执行i=B;
                        如果不相等，执行当前线程预期值：A=i,计算新的B, 完成这两步操作后，再次自旋判断A=?=i值，一直自旋下去，直到A==i,
                        给V地址的i赋上最新计算的B后本次CAS操作结束。
            解疑：CAS实质上并没有用到锁，所以写操作时肯定会存在抢占行为，CAS的有一个机制，A线程在写操作时被B线程抢占，A线程所执行的动作整体
                重新开始，保证了数据的安全性。落到实处就是当A线程比较完后，再做赋值：i=B之前被别的线程抢占了CPU,那么让别的线程先来，同时A线程
                下次抢占到Cpu后，重头来时，重新比较，比较后再根据情况进行下一步操作。
            CAS带来的ABA问题：
                一般会附带version来解决

















